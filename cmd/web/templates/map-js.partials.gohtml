{{define "map-js"}}
<script>

var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
});

function loadMap(parameters) {
    document.getElementById("map").innerText = "";
    document.getElementById("some_stats").innerText = "Routes: 0\nAirports: 0";
    document.getElementById("airport_info").innerHTML = "";

    var data = loadJSON("{{index .API "MapData"}}"+parameters);

    var lines = data["lines"];
    var markers = data["markers"];

    /* generate a map */
    var map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            })
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([14.2588996887, 50.3246994019]),
            zoom: 5
        }),
        controls: ol.control.defaults.defaults().extend([
            new ol.control.FullScreen()
        ])
    });

    var some_stats = "";

    /* generate line points */
    var points = [];
    if (lines) { // lines can be empty if filter no-routes is true
        for (var x = 0; x < lines.length; x++) {
            points.push([lines[x]["point1"], lines[x]["point2"]]);
        }

        /* drawing routes... */
        var vectorLine = new ol.source.Vector({});

        for (var x = 0; x < points.length; x++) {
            for (var i = 0; i < points[x].length; i++) {
                points[x][i] = ol.proj.transform(points[x][i], 'EPSG:4326', 'EPSG:3857');
            }

            var featureLine = new ol.Feature({
                geometry: new ol.geom.LineString(points[x])
            });

            vectorLine.addFeature(featureLine);
        }

        var vectorLineLayer = new ol.layer.Vector({
            source: vectorLine,
            style: new ol.style.Style({
                fill: new ol.style.Fill({ color: '#888888', weight: 0.4 }),
                stroke: new ol.style.Stroke({ color: '#888888', width: 1 })
            })
        });

        map.addLayer(vectorLineLayer);

        some_stats += "Routes: " + lines.length + "\n";
    }

    /* drawing markers */
    var vectorMarker = new ol.source.Vector({});

    if (markers) {
        for (var x = 0; x < markers.length; x++) {
            var iconStyle = [
                new ol.style.Style({
                    image: new ol.style.Icon(/** @type {module:ol/style/Icon~Options} */ ({
                        src: "/static/favicon.ico"
                    }))
                }),
                new ol.style.Style({
                    text: new ol.style.Text({
                        text: markers[x]["name"],
                        offsetY: -12,
                        scale: 1.3,
                        fill: new ol.style.Fill({
                            color: '#black',
                        })
                    })
                })
            ]

            var featureMarker = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat(markers[x]["point"])),
                desc: "/static/favicon.ico",
                name: markers[x]["name"],
                civil_name: markers[x]["civil_name"],
                country: markers[x]["country"],
                city: markers[x]["city"],
                elevation: markers[x]["elevation"]
            });

            featureMarker.setStyle(iconStyle);
            vectorMarker.addFeature(featureMarker);
        }

        some_stats += "Airports: " + markers.length;
    } else {
        map.renderSync();

        return;
    }

    var vectorMarkerLayer = new ol.layer.Vector({
        source: vectorMarker,
    });

    map.addLayer(vectorMarkerLayer);

    map.renderSync();

    var extent = vectorMarkerLayer.getSource().getExtent();
    map.getView().fit(extent, {size:map.getSize(), maxZoom:16, padding: [20,20,20,20]});

    document.getElementById("some_stats").innerText = some_stats;

    map.on('click', function (evt) {
        const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
            return feature;
        });

        // cliked somewhere on the map
        if (!feature) {
            document.getElementById("airport_info").innerHTML = "";
            return;
        }

        // clicked but not on the marker
        if (feature.get("name") === undefined) {
            document.getElementById("airport_info").innerHTML = "";
            return;
        }

        // show airport/marker info
        airport_info = `Airport: ${feature.get("name")}<br>`
        airport_info += `Name: ${feature.get("civil_name")}<br>`
        airport_info += `Country: ${feature.get("country")}<br>`;
        airport_info += `Elevation: ${feature.get("elevation")}<br>`;
        document.getElementById("airport_info").innerHTML = airport_info;
    });

    map.on('pointermove', function (e) {
        const pixel = map.getEventPixel(e.originalEvent);

        var is_marker = false;
        features = map.getFeaturesAtPixel(pixel);
        for (var x = 0; x < features.length; x++) {
            if (features[x].get("name") !== undefined) {
                is_marker = true;
            }
        }

        if(is_marker) {
            const hit = map.hasFeatureAtPixel(pixel);
            document.getElementById('map').style.cursor = hit ? 'pointer' : '';
        } else {
            document.getElementById('map').style.cursor = '';
        }
    });
}

function Refresh() {
    let filter_noroutes = document.getElementById("filter_noroutes").checked;
    parameters = "?start_date=" + encodeURIComponent(start.format("YYYYMMDD")) +
        "&end_date=" + encodeURIComponent(end.format("YYYYMMDD")) +
        "&filter_noroutes=" + encodeURIComponent(filter_noroutes);

    loadMap(parameters)
}
</script>
{{end}}
