{{define "settings-js"}}
{{$settings := index .Data "settings"}}
<script>
var removeButton = '<button class="btn-sm btn-outline-danger" type="button" onclick="" id="remove_row"><i class="bi bi-dash-square-fill"></i></button>';
var rowBody = `<tr><td contenteditable="true">CLASS_NAME</td><td contenteditable="true">TYPE_NAME</td><td>${removeButton}</td></tr>`;

$("#add_row").on("click", function(){
    $('#aircraft_class').find('tbody').append(rowBody.replace("CLASS_NAME", "New Class Name").replace("TYPE_NAME", "Type1, Type2, Type3"));
});

$("#aircraft_class").on("click", "#remove_row", function(){
    $(this).closest("tr").remove();
});

$(document).ready( function () {
    PopulateAircraftClassesTable();
} );

function PopulateAircraftClassesTable() {
    $('#aircraft_class').find('tbody').empty();

    var aircrafts = loadJSON("{{index .API "Aircrafts"}}");
    var models_data = [];
    for (var item in aircrafts) {
        if (!models_data.includes(aircrafts[item])){
            models_data.push(aircrafts[item]);
        }
    }

    var classes_data = loadJSON("{{index .API "SettingsAircraftClasses"}}");

    for (var key of Object.keys(classes_data)) {
        $('#aircraft_class').find('tbody').append(rowBody.replace("CLASS_NAME", key).replace("TYPE_NAME", classes_data[key]));

        var tmp_models_data = [...models_data];

        for (var i = 0; i < tmp_models_data.length; i++) {
            if (classes_data[key].includes(tmp_models_data[i])) {
                models_data = removeArrayItem(models_data, tmp_models_data[i]);
            }
        }
    }

    if (models_data.length > 0) {
        document.getElementById("not_populated").innerHTML = "<br>Aircraft models without classification: " + models_data;
    } else {
        document.getElementById("not_populated").innerHTML = "";
    }
}

function removeArrayItem(arr, value) {
    var index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
    }
    return arr;
}

function Save() {
    if (document.getElementById("auth_enabled").checked) {
        if (document.getElementById("login").value === "") {
            showErrorMessage("Login field is empty");
            return;
        }

        if (document.getElementById("password").value === "") {
            if (document.getElementById("previous_auth_value").value == "false") {
                showErrorMessage("Password field is empty");
                return;
            }
        }
    }

    var table = document.getElementById("aircraft_class");

    var aircraft_classes = {};
    for (var i = 0, row; row = table.rows[i]; i++) {

        class_name = row.cells[0].innerText;
        types = row.cells[1].innerText;

        if (class_name !== "Class Name") {
            aircraft_classes[class_name] = types
        }
    }

    let payload = {
        owner_name: document.getElementById("owner_name").value,
        signature_text: document.getElementById("signature_text").value,
        aircraft_classes: aircraft_classes,
        auth_enabled: document.getElementById("auth_enabled").checked,
        login: document.getElementById("login").value,
        password: document.getElementById("password").value,
        disable_flightrecord_help: document.getElementById("disable_flightrecord_help").checked,
        hide_stats_fields: {
            hide_se: document.getElementById("hide_se").checked,
            hide_me: document.getElementById("hide_me").checked,
            hide_mcc: document.getElementById("hide_mcc").checked,
            hide_night: document.getElementById("hide_night").checked,
            hide_ifr: document.getElementById("hide_ifr").checked,
            hide_pic: document.getElementById("hide_pic").checked,
            hide_copilot: document.getElementById("hide_copilot").checked,
            hide_dual: document.getElementById("hide_dual").checked,
            hide_instructor: document.getElementById("hide_instructor").checked,
            hide_sim: document.getElementById("hide_sim").checked,
            hide_cc: document.getElementById("hide_cc").checked,
            hide_landings: document.getElementById("hide_landings").checked,
            hide_distance: document.getElementById("hide_distance").checked
        }
    };

    const requestOptions = {
        method: 'post',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
    };

    fetch("{{index .API "Settings"}}", requestOptions)
        .then(response => response.json())
        .then(function(data) {
            if (data.ok) {
                showInfoMessage(data.message);
                PopulateAircraftClassesTable();
                if (typeof data.redirect_url !== 'undefined') {
                    location.href = data.redirect_url;
                }
            } else {
                showErrorMessage(data.message);
            }
        });
}

function UpdateAirportsDB() {
    showInfoMessage("Updating...");

    const requestOptions = {
        method: 'get',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
    };

    fetch("{{index .API "AirportUpdate"}}", requestOptions)
        .then(response => response.json())
        .then(function(data) {
            if (data.ok) {
                document.getElementById("airports").value = data.message + " airports";
                showInfoMessage("Airports DB has been updated");
            } else {
                showErrorMessage(data.message);
            }
        });
}
</script>
{{end}}