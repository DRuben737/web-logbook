{{define "settings-js"}}
{{$settings := index .Data "settings"}}
<script src="/static/js/signature_pad.umd.js"></script>
<script type="text/javascript" src="/static/js/datatables.min.js"></script>
<script>

// WebLogbook Settings Namespace
wlbSettings = function () {
    var airports_custom = null;
    var airports_db = undefined;

    // signature pad
    var canvas = document.getElementById("signature-pad");
    var signaturePad = null;

    // resize canvas for signature pad
    function resizeCanvas() {
        var ratio = Math.max(window.devicePixelRatio || 1, 1);
        canvas.width = canvas.offsetWidth * ratio;
        canvas.height = canvas.offsetHeight * ratio;
        canvas.getContext("2d").scale(ratio, ratio);
    }

    // init signature
    function initSignature() {
        signaturePad = new SignaturePad(canvas, {
            backgroundColor: 'rgba(0,0,0,0)'
        });

        window.onresize = resizeCanvas;
        resizeCanvas();
        loadSignature();
    }

    function loadSignature() {
        var signatureImage = "{{$settings.SignatureImage}}";
        if (signatureImage!=="") {
            signaturePad.fromDataURL(signatureImage);
        }
    }

    // empty signature pad
    function clearSignature() {
        signaturePad.clear();
    }

    // upload signature from file
    function uploadSignature() {
        var sf = document.getElementById("signature_file");
        var file = sf.files[0],
        url = URL.createObjectURL(file);

        fetch(url)
            .then((res) => res.blob())
            .then((blob) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    signaturePad.fromDataURL(reader.result);
                };
                reader.readAsDataURL(blob);
        });

    }

    function pickSignatureColor() {
        document.getElementById("signature_color").click();
    }

    function changeSignatureColor() {
        function hexToRgb(hex) {
            // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        var rgb_color = hexToRgb(document.getElementById("signature_color").value);

        signaturePad.penColor = `rgb(${rgb_color.r}, ${rgb_color.g}, ${rgb_color.b})`;
    }

    var removeButton = '<i class="bi bi-dash-square-fill" onclick="wlbSettings.removeClassesRow(this);" id="remove_row"></i>';
    var rowBody = `<tr><td contenteditable="true">CLASS_NAME</td><td contenteditable="true">TYPE_NAME</td><td>${removeButton}</td></tr>`;

    // add new row for aircraft classes table
    function addNewClassesRow() {
        $('#aircraft_class').find('tbody').append(rowBody.replace("CLASS_NAME", "New Class Name").replace("TYPE_NAME", "Type1, Type2, Type3"));
    }

    // remove row from aircraft classes
    function removeClassesRow(obj) {
        obj.closest("tr").remove();
    }

    // helper function for reloadAircraftClassessTable()
    function removeArrayItem(arr, value) {
        var index = arr.indexOf(value);
        if (index > -1) {
            arr.splice(index, 1);
        }
        return arr;
    }

    // reload table with aircraft classess
    async function reloadAircraftClassesTable() {
        $('#aircraft_class').find('tbody').empty();

        var aircrafts = await wlbCommon.getJSON("{{index .API "Aircrafts"}}");
        var models_data = [];
        for (var item in aircrafts) {
            if (!models_data.includes(aircrafts[item])){
                models_data.push(aircrafts[item]);
            }
        }

        var classes_data = await wlbCommon.getJSON("{{index .API "SettingsAircraftClasses"}}");

        for (var key of Object.keys(classes_data)) {
            $('#aircraft_class').find('tbody').append(rowBody.replace("CLASS_NAME", key).replace("TYPE_NAME", classes_data[key]));

            var tmp_models_data = [...models_data];

            for (var i = 0; i < tmp_models_data.length; i++) {
                if (classes_data[key].includes(tmp_models_data[i])) {
                    models_data = removeArrayItem(models_data, tmp_models_data[i]);
                }
            }
        }

        if (models_data.length > 0) {
            document.getElementById("without_classes").innerHTML = "<br>Aircraft models without classification: " + models_data;
        } else {
            document.getElementById("without_classes").innerHTML = "";
        }
    }

    function saveSettings() {
        if (document.getElementById("auth_enabled").checked) {
            if (document.getElementById("login").value === "") {
                wlbCommon.showErrorMessage("Login field is empty");
                return;
            }

            if (document.getElementById("password").value === "") {
                if (document.getElementById("previous_auth_value").value == "false") {
                    wlbCommon.showErrorMessage("Password field is empty");
                    return;
                }
            }
        }

        var table = document.getElementById("aircraft_class");

        var aircraft_classes = {};
        for (var i = 0, row; row = table.rows[i]; i++) {

            class_name = row.cells[0].innerText;
            types = row.cells[1].innerText;

            if (class_name !== "Class Name") {
                aircraft_classes[class_name] = types
            }
        }

        // check signature
        var signatureImage = "";
        if (!signaturePad.isEmpty()) {
            signatureImage = signaturePad.toDataURL();
        }

        let payload = {
            owner_name: document.getElementById("owner_name").value,
            signature_text: document.getElementById("signature_text").value,
            signature_image: signatureImage,
            aircraft_classes: aircraft_classes,
            auth_enabled: document.getElementById("auth_enabled").checked,
            login: document.getElementById("login").value,
            password: document.getElementById("password").value,
            disable_flightrecord_help: document.getElementById("disable_flightrecord_help").checked,
            hide_stats_fields: {
                hide_se: document.getElementById("hide_se").checked,
                hide_me: document.getElementById("hide_me").checked,
                hide_mcc: document.getElementById("hide_mcc").checked,
                hide_night: document.getElementById("hide_night").checked,
                hide_ifr: document.getElementById("hide_ifr").checked,
                hide_pic: document.getElementById("hide_pic").checked,
                hide_copilot: document.getElementById("hide_copilot").checked,
                hide_dual: document.getElementById("hide_dual").checked,
                hide_instructor: document.getElementById("hide_instructor").checked,
                hide_sim: document.getElementById("hide_sim").checked,
                hide_cc: document.getElementById("hide_cc").checked,
                hide_landings: document.getElementById("hide_landings").checked,
                hide_distance: document.getElementById("hide_distance").checked
            },
            stats_font_size: document.getElementById("stats_font").value,
            logbook_font_size: document.getElementById("logbook_font").value
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{index .API "Settings"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    reloadAircraftClassesTable();
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    // update airports database
    function updateAirportsDB() {
        startUpdateStatus();
        wlbCommon.showInfoMessage("Updating...", false);

        const requestOptions = {
            method: 'get',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }
        };

        fetch("{{index .API "AirportUpdate"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    document.getElementById("airports").value = data.message + " airports";
                    wlbCommon.showInfoMessage("Airports DB has been updated");
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }

                stopUpdateStatus();
            });
    }

    function startUpdateStatus() {
        document.getElementById("spinner").classList.remove("d-none");
        document.getElementById("btn_update").disabled = true;
    }

    function stopUpdateStatus() {
        document.getElementById("spinner").classList.add("d-none");
        document.getElementById("btn_update").disabled = false;
    }

    // custom airports part
    function validateAirportFieldsS(field) {
        if (field.value.trim() === "") {
            field.classList.add("is-invalid");
            wlbCommon.showErrorMessage(`${field.placeholder} cannot be empty`);
            return false;
        } else {
            field.classList.remove("is-invalid");
            field.classList.add("is-valid");
            return true;
        }
    }

    function validateAirportFieldsN(field) {
        if (isNaN(field.value)) {
            field.classList.add("is-invalid");
            wlbCommon.showErrorMessage(`${field.placeholder} should be a number`);
            return false;
        } else {
            field.classList.remove("is-invalid");
            field.classList.add("is-valid");
            return true;
        }
    }

    // add new custom airport
    function addCustomAirport() {
        // validate fields
        let airport_name = document.getElementById("airport_name");
        if (!validateAirportFieldsS(airport_name)) {
            return;
        }

        let airport_elevation = document.getElementById("airport_elevation");
        if (!validateAirportFieldsN(airport_elevation)) {
            return;
        }

        let airport_lat = document.getElementById("airport_lat");
        if (!validateAirportFieldsS(airport_lat) || !validateAirportFieldsN(airport_lat)) {
            return;
        }

        let airport_lon = document.getElementById("airport_lon");
        if (!validateAirportFieldsS(airport_lon) || !validateAirportFieldsN(airport_lon)) {
            return;
        }

        let payload = {
            name: airport_name.value.trim(),
            city: document.getElementById("airport_city").value,
            country: document.getElementById("airport_country").value,
            elevation: parseFloat(airport_elevation.value),
            lat: parseFloat(airport_lat.value),
            lon: parseFloat(airport_lon.value),
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{index .API "AirportAddCustom"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    // reload the table and clear the fields
                    reloadCustomAirports();
                    clearCustomAirportFields();
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    // inits a table with a list of custom/user airports
    function initCustomAirportsTable() {
        airports_custom = $('#airports_custom').DataTable({
            ordering: true,
            info:     false,
            lengthMenu: [[15, 30, -1], [15, 30, "All"]],
            columnDefs: [
                { targets: [3,4,5], className: "dt-body-center" },
                { targets: [0], width: "15%" },
                { targets: [1], width: "15%" },
                { targets: [2], width: "15%" },
                { targets: [3], width: "15%" },
                { targets: [4], width: "20%" },
                { targets: [5], width: "20%" },
            ],
            rowCallback: function(row, data, index){
                $("td:eq(6)", row).html(`<i class="bi bi-dash-square-fill" onclick="wlbSettings.removeCustomAirport('${data[0]}');"></i>`);
            },
        } );

        reloadCustomAirports();
    }

    function reloadCustomAirports() {
        const requestOptions = {
            method: 'get',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }
        }

        fetch("{{index .API "AirportCustomData"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                airports_custom.clear();
                if (data["data"] !== null) {
                    airports_custom.rows.add(data["data"]).draw();
                } else {
                    airports_custom.rows.add([]).draw();
                }
            })
    }

    // clear the new airports fields
    function clearCustomAirportFields() {
        const clear = function(field) {
            field.value = "";
            field.classList.remove("is-invalid");
            field.classList.remove("is-valid");
        };

        clear(document.getElementById("airport_name"));
        clear(document.getElementById("airport_city"));
        clear(document.getElementById("airport_country"));
        clear(document.getElementById("airport_elevation"));
        clear(document.getElementById("airport_lat"));
        clear(document.getElementById("airport_lon"));
    }

    // remove user airport
    function removeCustomAirport(airport_name) {
        let payload = {
            name: airport_name,
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{index .API "AirportDeleteCustom"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    // reload the table
                    reloadCustomAirports();
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    function showAirportsDB() {
        const airportDBModal = new bootstrap.Modal(document.getElementById('airportDB'), {});

        if (!airports_db) {
            airports_db = $('#airports_db').DataTable({
                ordering: true,
                bLengthChange: false,
                info: false,
                ajax: "{{index .API "AirportStandardData"}}",
                lengthMenu: [[20], [20]],
                columnDefs: [
                    { targets: [5,6,7], className: "dt-body-center" },
                    { targets: [0], width: "10%" },
                    { targets: [1], width: "10%" },
                    { targets: [2], width: "30%" },
                    { targets: [3], width: "10%" },
                    { targets: [4], width: "19%" },
                ]
            } );
        }

        airportDBModal.show();
    }

    // export functions
    return {
        reloadAircraftClassesTable:reloadAircraftClassesTable,
        addNewClassesRow:addNewClassesRow,
        removeClassesRow:removeClassesRow,
        saveSettings:saveSettings,
        updateAirportsDB:updateAirportsDB,
        initSignature:initSignature,
        clearSignature:clearSignature,
        uploadSignature:uploadSignature,
        pickSignatureColor:pickSignatureColor,
        changeSignatureColor:changeSignatureColor,
        addCustomAirport:addCustomAirport,
        initCustomAirportsTable:initCustomAirportsTable,
        removeCustomAirport:removeCustomAirport,
        showAirportsDB:showAirportsDB
    }
}();

$(document).ready( function () {
    wlbSettings.initCustomAirportsTable();
    wlbSettings.reloadAircraftClassesTable();
    wlbSettings.initSignature();
} );

</script>
{{end}}