{{define "import-js"}}
{{$api := .API}}
<script src="/static/js/papaparse.js"></script>
<script type="text/javascript" src="/static/js/datatables.min.js"></script>
<script>

// WebLogbook Import Namespace
wlbImport = function () {
    const mapFieldsModal = new bootstrap.Modal(document.getElementById('mapFieldsModal'), {})

    var csv_import = null;
    var table_data = [];
    var table = null;

    // add headers as options to each select in the mapping form
    function fillSelectOptions(options) {
        var elements = document.querySelectorAll("#mapFieldsModal select");
        for (var i = 0, element; element = elements[i++];) {
            // reset all options
            element.length = 0;
            var chooseOneOption = document.createElement("option");
            chooseOneOption.text = "Select one...";
            chooseOneOption.value = "-1";
            element.add(chooseOneOption);

            options.forEach(function(item, index){
                var elementOption = document.createElement("option");
                elementOption.text = item;
                elementOption.value = index;
                element.add(elementOption);
            });
        }
    }

    // loads csv file and parse it using papaparse lib
    function parseCSV() {
        var csv_file = document.getElementById("csv_file");
        var file = csv_file.files[0];

        Papa.parse(file, {
            complete: function(results) {
                if ( results.errors.length ) {
                    wlbCommon.showErrorMessage('csv parsing error: '+ results.errors[0].message);
                }
                else {
                    fillSelectOptions(results.data[0]);

                    csv_import = results;
                    mapFieldsModal.show();
                }
            }
        });
    }

    // initImportTable inits the table with datasets params and column width
    function initImportTable() {
        table = $('#import').DataTable({
            ordering: false,
            info:     false,
            lengthMenu: [[15, 50, -1], [15, 50, "All"]],
            columns : [
                { data: "date" },
                { data: "departure_place" },
                { data: "departure_time" },
                { data: "arrival_place" },
                { data: "arrival_time" },
                { data: "aircraft_model" },
                { data: "aircraft_reg" },
                { data: "se_time" },
                { data: "me_time" },
                { data: "mcc_time" },
                { data: "total_time" },
                { data: "night_time" },
                { data: "ifr_time" },
                { data: "pic_time" },
                { data: "sic_time" },
                { data: "dual_time" },
                { data: "instr_time" },
                { data: "landings_day" },
                { data: "landings_night" },
                { data: "sim_type" },
                { data: "sim_time" },
                { data: "pic_name" },
                { data: "remarks" }
            ],
            columnDefs: [
                { targets: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20], className: "dt-body-center" },
                { targets: [0], width: "1%" }, //date
                { targets: [1,2,3,4], width: "4%" }, //places
                { targets: [7,8,9,10,11,12,13,14,15,16,20], width: "3%" }, //time
                { targets: [5,6,19], width: "4%" }, //aircraft
                { targets: [17,18], width: "3%" }, //landings
                { targets: [21], width: "9%" }, //pic
            ],
        } );
    }

    // Autoload profiles for CSV mappings
    function loadCSVProfile(profileName) {
        if (profileName === "WebLogbook") {
            loadCSVProfileWebLogbook();
        }
    }

    function getHeaderId(name) {
        var id = "-1";

        if (csv_import !== null) {
            if (csv_import.data.length > 0) {
                csv_import.data[0].forEach(function(item, index){
                    if (item === name) {
                        id = index.toString();
                    }
                });
            }
        }

        return id;
    }

    function loadCSVProfileWebLogbook() {
        document.getElementById("date").value = getHeaderId("Date");
        document.getElementById("departure_place").value = getHeaderId("Departure Place");
        document.getElementById("departure_time").value = getHeaderId("Departure Time");
        document.getElementById("arrival_place").value = getHeaderId("Arrival Place");
        document.getElementById("arrival_time").value = getHeaderId("Arrival Time");
        document.getElementById("aircraft_model").value = getHeaderId("Aircraft Model");
        document.getElementById("aircraft_reg").value = getHeaderId("Aircraft Reg");
        document.getElementById("se_time").value = getHeaderId("Time SE");
        document.getElementById("me_time").value = getHeaderId("Time ME");
        document.getElementById("mcc_time").value = getHeaderId("Time MCC");
        document.getElementById("total_time").value = getHeaderId("Time Total");
        document.getElementById("landings_day").value = getHeaderId("Landings Day");
        document.getElementById("landings_night").value = getHeaderId("Landings Night");
        document.getElementById("night_time").value = getHeaderId("Time Night");
        document.getElementById("ifr_time").value = getHeaderId("Time IFR");
        document.getElementById("pic_time").value = getHeaderId("Time PIC");
        document.getElementById("sic_time").value = getHeaderId("Time CoPilot");
        document.getElementById("dual_time").value = getHeaderId("Time Dual");
        document.getElementById("instr_time").value = getHeaderId("Time Instructor");
        document.getElementById("sim_type").value = getHeaderId("SIM Type");
        document.getElementById("sim_time").value = getHeaderId("SIM Time");
        document.getElementById("pic_name").value = getHeaderId("PIC Name");
        document.getElementById("remarks").value = getHeaderId("Remarks");
    }

    function getMappedValue(name, arr) {
        id = document.getElementById(name).value;
        if (id === "-1") {
            return "";
        } else {
            return arr[id];
        }
    }

    // function for automatic time format recognition for departures and arrivals
    function autoTimeRecog(time) {
        time = time.replace(/[^0-9]/g, '').padStart(4,'0');

        return time;
    }

    // preview data for import table
    function previewImport() {
        table_data = [];

        for (var i = 1; i < csv_import.data.length-1; i++) {
            var item = {
                date: getMappedValue("date", csv_import.data[i]),
                departure_place: getMappedValue("departure_place", csv_import.data[i]),
                departure_time: autoTimeRecog(getMappedValue("departure_time", csv_import.data[i])),
                arrival_place: getMappedValue("arrival_place", csv_import.data[i]),
                arrival_time: autoTimeRecog(getMappedValue("arrival_time", csv_import.data[i])),
                aircraft_model: getMappedValue("aircraft_model", csv_import.data[i]),
                aircraft_reg: getMappedValue("aircraft_reg", csv_import.data[i]),
                se_time: getMappedValue("se_time", csv_import.data[i]),
                me_time: getMappedValue("me_time", csv_import.data[i]),
                mcc_time: getMappedValue("mcc_time", csv_import.data[i]),
                total_time: getMappedValue("total_time", csv_import.data[i]),
                night_time: getMappedValue("night_time", csv_import.data[i]),
                ifr_time: getMappedValue("ifr_time", csv_import.data[i]),
                pic_time: getMappedValue("pic_time", csv_import.data[i]),
                sic_time: getMappedValue("sic_time", csv_import.data[i]),
                dual_time: getMappedValue("dual_time", csv_import.data[i]),
                instr_time: getMappedValue("instr_time", csv_import.data[i]),
                landings_day: wlbCommon.formatLandings(getMappedValue("landings_day", csv_import.data[i])),
                landings_night: wlbCommon.formatLandings(getMappedValue("landings_night", csv_import.data[i])),
                sim_type: getMappedValue("sim_type", csv_import.data[i]),
                sim_time: getMappedValue("sim_time", csv_import.data[i]),
                pic_name: getMappedValue("pic_name", csv_import.data[i]),
                remarks: getMappedValue("remarks", csv_import.data[i])
            };

            table_data.push(item);
        }

        table.clear();
        table.rows.add(table_data).draw();

        wlbCommon.showInfoMessage(`Loaded ${table_data.length} rows`);
    }

    // clear table
    function clearTable() {
        table_data = [];
        table.clear();
        table.rows.add(table_data).draw();

        wlbCommon.showInfoMessage(`Table cleared`);
    }

    // create backup
    function createBackup() {
        let payload = {};

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{index .API "ImportCreateBackup"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            })
    }

    // run import
    function importData() {
        if (table_data.length === 0) {
            wlbCommon.showInfoMessage("Nothing to import");
            return;
        }

        startImportStatus();

        let frs = [];

        for (var i = 0; i < table_data.length; i++) {
            item = table_data[i];
            frs.push(marshallItem(item));
        };

        let payload = {
            recalculate_night_time: document.getElementById("recalculate_night_time").checked,
            data: frs,
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{index .API "ImportRun"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    clearTable();
                    wlbCommon.showInfoMessage(data.message);
                } else {
                    var err_data = JSON.parse(data.data);

                    table_data = [];
                    for (var i = 0; i < err_data.length; i++) {
                        item = err_data[i];
                        table_data.push(unmarshallItem(item));
                    };
                    table.clear();
                    table.rows.add(table_data).draw();

                    wlbCommon.showErrorMessage(data.message);
                }

                stopImportStatus();
            })
    }

    function startImportStatus() {
        document.getElementById("spinner").classList.remove("d-none");
        document.getElementById("btn_import").disabled = true;
    }

    function stopImportStatus() {
        document.getElementById("spinner").classList.add("d-none");
        document.getElementById("btn_import").disabled = false;
    }

    function marshallItem(item) {
        var converted_item = {
            uuid: "",
            date: item["date"],
            departure: {
                place: item["departure_place"],
                time: item["departure_time"]
            },
            arrival: {
                place: item["arrival_place"],
                time: item["arrival_time"]
            },
            aircraft: {
                model: item["aircraft_model"],
                reg_name: item["aircraft_reg"]
            },
            time: {
                se_time: item["se_time"],
                me_time: item["me_time"],
                mcc_time: item["mcc_time"],
                total_time: item["total_time"],
                night_time: item["night_time"],
                ifr_time: item["ifr_time"],
                pic_time: item["pic_time"],
                co_pilot_time: item["sic_time"],
                dual_time: item["dual_time"],
                instructor_time: item["instr_time"]
            },
            landings: {
                day: item["landings_day"],
                night: item["landings_night"]
            },
            sim: {
                type: item["sim_type"],
                time: item["sim_time"]
            },
            pic_name: item["pic_name"],
            remarks: item["remarks"]
        };

        return converted_item;
    }

    function unmarshallItem(item) {
        var converted_item = {
            date: item["date"],
            departure_place: item["departure"]["place"],
            departure_time: item["departure"]["time"],
            arrival_place: item["arrival"]["place"],
            arrival_time: item["arrival"]["time"],
            aircraft_model: item["aircraft"]["model"],
            aircraft_reg: item["aircraft"]["reg_name"],
            se_time: item["time"]["se_time"],
            me_time: item["time"]["me_time"],
            mcc_time: item["time"]["mcc_time"],
            total_time: item["time"]["total_time"],
            night_time: item["time"]["night_time"],
            ifr_time: item["time"]["ifr_time"],
            pic_time: item["time"]["pic_time"],
            sic_time: item["time"]["co_pilot_time"],
            dual_time: item["time"]["dual_time"],
            instr_time: item["time"]["instructor_time"],
            landings_day: item["landings"]["day"],
            landings_night: item["landings"]["night"],
            sim_type: item["sim"]["type"],
            sim_time: item["sim"]["time"],
            pic_name: item["pic_name"],
            remarks: item["remarks"]
        };

        return converted_item;
    }

    return {
        parseCSV:parseCSV,
        initImportTable:initImportTable,
        loadCSVProfile:loadCSVProfile,
        previewImport:previewImport,
        createBackup:createBackup,
        importData:importData,
        clearTable:clearTable
    }
}();

$(document).ready( function () {
    wlbImport.initImportTable();
});

</script>
{{end}}