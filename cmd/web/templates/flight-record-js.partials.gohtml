{{define "flight-record-js"}}
{{$settings := index .Data "settings"}}
<script>

// WebLogbook FlightRecord Namespace
wlbFlightRecord = function () {
    var aircrafts;

    // validaters
    function validateDepArrTime(field) {
        if (field.value !== "") {
            if (field.value.length !== 4) {
                field.classList.add("is-invalid");
                return false
            } else {
                field.classList.add("is-valid");
            }
        }

        field.classList.remove("is-invalid");
        return true
    }

    function validateTime(field) {
        if (field.value !== "") {
            if (!/^(?:(?<!\d)|[0-9]\d{0,4}):([0-5]\d)$/.test(field.value)) {
                field.classList.add("is-invalid");
                return false
            } else {
                field.classList.add("is-valid");
            }
        }

        field.classList.remove("is-invalid");
        return true
    }

    // validates fields before flight record save/update
    function validateFields() {

        var isValid = true;
        var errorMessage = "";
        var errEndMessage = "should be in HH:MM format or empty\r\n";

        // validate date field
        var date = document.getElementById("date");
        if (!date.value) {
            date.classList.add("is-invalid");
            isValid = false
            errorMessage = errorMessage + "Date cannot be empty\r\n";
        } else {
            date.classList.remove("is-invalid");
            date.classList.add("is-valid");
        }

        // valiudate departure and arrival time if they are not empty
        if (!validateDepArrTime(document.getElementById("departure_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Departure Time should be in HHMM format or empty\r\n";
        }
        if (!validateDepArrTime(document.getElementById("arrival_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Arrival Time should be in HHMM format or empty\r\n";
        }

        // validate time fields
        if (!validateTime(document.getElementById("total_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Total Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("se_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Single Engine Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("me_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Multi Engine Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("mcc_time"))) {
            isValid = false;
            errorMessage = errorMessage + `MCC Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("night_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Night Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("ifr_time"))) {
            isValid = false;
            errorMessage = errorMessage + `IFR Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("pic_time"))) {
            isValid = false;
            errorMessage = errorMessage + `PIC Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("sic_time"))) {
            isValid = false;
            errorMessage = errorMessage + `CoPilot Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("dual_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Dual Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("instr_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Instructor Time ${errEndMessage}`;
        }
        if (!validateTime(document.getElementById("sim_time"))) {
            isValid = false;
            errorMessage = errorMessage + `Simulator Time ${errEndMessage}`;
        }

        if (!isValid) {
            wlbCommon.showErrorMessage(errorMessage);
            return;
        }

        wlbCommon.showInfoMessage("OK!");

        saveFlightRecord();
    }

    // save/update flight record
    function saveFlightRecord() {
        let payload = {
            uuid: document.getElementById("uuid").value,
            date: document.getElementById("date").value,
            departure: {
                place: document.getElementById("departure_place").value,
                time: document.getElementById("departure_time").value
            },
            arrival: {
                place: document.getElementById("arrival_place").value,
                time: document.getElementById("arrival_time").value
            },
            aircraft: {
                model: document.getElementById("aircraft_model").value,
                reg_name: document.getElementById("aircraft_reg").value
            },
            time: {
                se_time: document.getElementById("se_time").value,
                me_time: document.getElementById("me_time").value,
                mcc_time: document.getElementById("mcc_time").value,
                total_time: document.getElementById("total_time").value,
                night_time: document.getElementById("night_time").value,
                ifr_time: document.getElementById("ifr_time").value,
                pic_time: document.getElementById("pic_time").value,
                co_pilot_time: document.getElementById("sic_time").value,
                dual_time: document.getElementById("dual_time").value,
                instructor_time: document.getElementById("instr_time").value
            },
            landings: {
                day: wlbCommon.formatLandings(document.getElementById("landings_day").value),
                night: wlbCommon.formatLandings(document.getElementById("landings_night").value)
            },
            sim: {
                type: document.getElementById("sim_type").value,
                time: document.getElementById("sim_time").value
            },
            pic_name: document.getElementById("pic_name").value,
            remarks: document.getElementById("remarks").value
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{index .API "LogbookSave"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            })
    }

    function deleteFlightRecord() {
        let payload = {
            uuid: document.getElementById("uuid").value
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{index .API "LogbookDelete"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            })
    }

    // time calculations
    function calculateTimes() {
        let departure_time = document.getElementById("departure_time").value;
        let arrival_time = document.getElementById("arrival_time").value;

        if ((departure_time.length == 4) && (arrival_time.length == 4) && (!isNaN(departure_time)) && (!isNaN(arrival_time))) {
            start = [departure_time.substring(0, 2), departure_time.substring(2)];
            end = [arrival_time.substring(0, 2), arrival_time.substring(2)];

            document.getElementById("total_time").value = calculateTotalTime(start, end);

            calculateNightTime();
        }
    }

    function calculateTotalTime(start, end) {
        var startDate = new Date(0, 0, 0, start[0], start[1], 0);
        var endDate = new Date(0, 0, 0, end[0], end[1], 0);
        var diff = endDate.getTime() - startDate.getTime();
        var hours = Math.floor(diff / 1000 / 60 / 60);
        diff -= hours * 1000 * 60 * 60;
        var minutes = Math.floor(diff / 1000 / 60);


        if (hours < 0) {
            hours = hours + 24;
        }

        totalTime = hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
        return totalTime;
    }

    function calculateNightTime() {
        let payload = {
            date: document.getElementById("date").value,
            departure: {
                place: document.getElementById("departure_place").value,
                time: document.getElementById("departure_time").value
            },
            arrival: {
                place: document.getElementById("arrival_place").value,
                time: document.getElementById("arrival_time").value
            }
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{index .API "LogbookNight"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    night_time = parseInt(data.message)
                    if (night_time > 0) {
                        var hours = Math.floor(night_time / 60);
                        var minutes = night_time - (hours * 60);

                        time = hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
                        document.getElementById("night_time").value = time;
                    } else {
                        document.getElementById("night_time").value = "";
                    }
                }
            })
    }

    function deleteAttachment(id) {
        let payload = {
            uuid: id
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{index .API "LogbookAttachmentsDelete"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    loadAttachments();
                    wlbCommon.showInfoMessage("Attachment deleted");
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            })
    };

    async function loadAttachments() {
        var uuid = document.getElementById("uuid").value
        if (uuid === "") {
            // new record
            return;
        }

        var tbody = document.getElementById("attachments_table");
        var rows = "";

        logbook_attachments_url = "{{index .API "LogbookUUIDAttachments"}}";
        data = await wlbCommon.getJSON(logbook_attachments_url.replace("{uuid}", uuid));

        if (data.length) {
            tbody.innerHTML = "";
            for (var x = 0; x < data.length; x++) {
                var logbookAttachmentsDownloadAPI = {{index .API "LogbookAttachmentsDownload"}};
                rows = rows +
                    `<tr>
                        <td><a href="${logbookAttachmentsDownloadAPI}${data[x]["uuid"]}" target="_blank">${data[x]["document_name"]}</a></td>
                        <td id="ask_${data[x]["uuid"]}"><a onclick="wlbFlightRecord.askForDelete('${data[x]["uuid"]}');"><i class="bi bi-file-x-fill"></i> Delete</a></td>
                    </tr>`;
            }
            tbody.innerHTML = rows;
            document.getElementById("attach_button").innerHTML = '<i class="bi bi-paperclip"></i> Attachments <span class="badge bg-secondary">' + data.length + '</span>';
        } else {
            tbody.innerHTML = "";
            document.getElementById("attach_button").innerHTML = '<i class="bi bi-paperclip"></i> Attachments';
        }
    };

    function uploadAttachment() {
        var doc = document.getElementById("document").value

        if (doc === "") {
            return;
        }

        let payload = new FormData(flight_record_attachment_form);

        const requestOptions = {
            method: 'post',
            body: payload,
        }

        fetch("{{index .API "LogbookAttachmentsUpload"}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    loadAttachments();
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            })

        document.getElementById("flight_record_attachment_form").reset();
    };

    function askForDelete(uuid) {
        var tdbody = document.getElementById("ask_"+uuid);
        tdbody.innerHTML = `<button type="button" class="btn btn-sm btn-outline-danger" onclick="wlbFlightRecord.deleteAttachment('${uuid}')"><i class="bi bi-check-square-fill"></i> Confirm</button>`;
    };

    function onRegChange() {
        if (document.getElementById("aircraft_model").value === "") {
            aircraft_reg = document.getElementById("aircraft_reg").value;
            for (var item in aircrafts) {
                if (item === aircraft_reg) {
                    document.getElementById("aircraft_model").value = aircrafts[item]
                    break;
                }
            }
        }
    }

    function onDepArrChange() {
        var departure_place = document.getElementById("departure_place").value
        var arrival_place = document.getElementById("arrival_place").value

        if (departure_place !== "" && arrival_place !== "") {
            wlbFlightMap.loadMap(departure_place, arrival_place);
        }
    }

    function initDateRangePicker() {
        $('input[name="date"]').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            locale: {
                format: 'DD/MM/YYYY',
                firstDay: parseInt({{if not $settings.DateRangePickerWeek}}"0"{{else}}{{$settings.DateRangePickerWeek}}{{end}})
            },
            autoApply: true,
        }, function(start, end, label) {
            $(this).val(start.format('DD/MM/YYYY'));
        });
    }

    async function initAircraftsList() {
        aircrafts = await wlbCommon.getJSON('{{index .API "Aircrafts"}}');
    }

    return {
        validateFields:validateFields,
        deleteFlightRecord:deleteFlightRecord,
        calculateTimes:calculateTimes,
        deleteAttachment:deleteAttachment,
        loadAttachments:loadAttachments,
        uploadAttachment:uploadAttachment,
        askForDelete:askForDelete,
        onRegChange:onRegChange,
        onDepArrChange:onDepArrChange,
        initDateRangePicker:initDateRangePicker,
        initAircraftsList:initAircraftsList
    }
}();

$(document).ready( async function () {
    wlbFlightRecord.initDateRangePicker();
    wlbFlightRecord.onDepArrChange();
    wlbFlightRecord.loadAttachments();
    wlbFlightRecord.initAircraftsList();
});
</script>
{{end}}