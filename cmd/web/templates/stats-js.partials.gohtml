{{define "stats-js"}}
{{$api := .API}}
{{$settings := index .Data "settings"}}
<script type="text/javascript" src="/static/js/chart.min.js"></script>
<script>

// WebLogbook Stats Namespace
wlbStats = function () {
    // chart
    var ctx = document.getElementById('myChart').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'bar',
        data: {},
        options: {
            scales: {
                y: { beginAtZero: true }
            },
            plugins:{
                legend: { display: false }
            }
        }
    });

    // fields
    var range_field = document.getElementById("range_field");

    // func convertTime converts time in string format to integer
    function convertTime(time) {
        if (time === "") {
            return 0;
        }

        if (!time.includes(":")) {
            return time.replace(" ",""); // already converted
        }

        var hoursMinutes = time.split(/[.:]/);
        var hours = parseInt(hoursMinutes[0], 10);
        var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;

        return hours + Math.round(minutes / 60 * 100) / 100;
    }

    // func onStatsClick redraw the chart based on the column/stats selection
    function onStatsClick(table_name, cl) {
        var tb = document.getElementById(table_name);
        var rows = tb.rows.length - 1;

        if (table_name === "totals") {
            rows = rows - 2 // correction for this table
            chart.data.labels = ['Total', 'SE', 'ME', 'MCC', 'Night', 'IFR', 'PIC', 'CoPilot', 'Dual', 'Instr', 'Sim'];

        } else if ((table_name == "totals_by_year") || (table_name == "totals_by_type") || (table_name == "totals_by_class")) {
            var labels = [];
            for (var i = 1; i <= rows; i++) {
                labels.push(tb.rows[i].cells[0].innerText);
            }
            chart.data.labels = labels;

        }

        var values = [];
        for (var i = 1; i <= rows; i++) {
            values.push(convertTime(tb.rows[i].cells[cl].innerText));
        }

        chart.data.datasets = [
            {
                data: values,
                backgroundColor: 'rgba(36, 112, 220, 0.7)',
                borderColor: 'rgba(36, 112, 220, 0.7)',
                borderWidth: 1
            }
        ]
        chart.update();
    }

    // func onStatsTabChange get the amount of columns and calls the onStatsClick
    function onStatsTabChange(table_name) {
        var tb = document.getElementById(table_name);
        var cols = tb.rows[0].cells.length;
        onStatsClick(table_name, cols-1);
    }

    //func showRangeField shows or hides the field to select a time range for certain colums
    function showRangeField(flag) {
        if (flag) {
            range_field.classList.remove("d-none")
        } else {
            range_field.classList.add("d-none")
        }
    }

    // func drawProgressBar generates html to show in the stats limit cell
    function drawProgressBar(data, max) {
        var intData = convertTime(data);
        var percentData = parseInt(intData/max*100);

        if (data === "") {
            data = "0:00";
        }
        // inner and outer text for progress bar
        // depends on the % the text will be inside or outside the filled area
        // otherwise the area could be small and text not visible
        var innerText = "";
        var outerText = "";

        if (percentData <= 40) {
            outerText = `${data} of ${max}:00`
        } else {
            innerText = `${data} of ${max}:00`
        }

        // progress bar color
        var progressColor = "bg-success";

        if (percentData >= 50 && percentData <= 80) {
            progressColor = "bg-warning";
        } else if (percentData > 80) {
            progressColor = "bg-danger";
        }

        return `<div class="progress" role="progressbar" aria-valuenow="${intData}" aria-valuemin="0" aria-valuemax="${max}">
            <div class="progress-bar ${progressColor}" style="width: ${percentData}%">${innerText}</div>${outerText}</div>`;
    }

    // export functions
    return {
        onStatsClick:onStatsClick,
        onStatsTabChange:onStatsTabChange,
        showRangeField:showRangeField,
        drawProgressBar:drawProgressBar
    }
}();

var startDate = null;
var endDate = null;

$(document).ready( function () {
    // init Totals table
    var tableTotals = $('#totals').DataTable({
        "ordering": false,
        "info": false,
        "ajax": '{{index .API "StatsTotals"}}',
        "columnDefs": [
            {"targets": 0, "visible": false, "searchable": false},
            {"targets": 1, "className": "datatable-bold-column"},
            {"targets": [2,3,4,5,6,7], "width": "13%"},
        ],
        "paging": false,
        "searching": false,
        'initComplete': function () {
            // Show Totals for chart
            wlbStats.onStatsClick('totals', 6);
        }
    });

    // init Limitations table
    var tableLimits = $('#limits').DataTable({
        "ordering": false,
        "info": false,
        "ajax": '{{index .API "StatsLimits"}}',
        "columnDefs": [
            {"targets": [0,1,2,3], "width": "25%"},
        ],
        "paging": false,
        "searching": false,
        "rowCallback": function(row, data, index){
            $("td:eq(0)", row).html(wlbStats.drawProgressBar(data[0],90));
            $("td:eq(1)", row).html(wlbStats.drawProgressBar(data[1],280));
            $("td:eq(2)", row).html(wlbStats.drawProgressBar(data[2],1000));
            $("td:eq(3)", row).html(wlbStats.drawProgressBar(data[3],900));
        },
    });

    // init Totals By Type table
    var tableTotalsByType = $('#totals_by_type').DataTable({
        "orderFixed": [ 0, 'asc' ],
        "info": false,
        "ajax": '{{index .API "StatsTotalsByType"}}',
        "columnDefs": [
            {"targets": 0, "className": "datatable-bold-column"},
            {{if $settings.HideStatsFields.SE}}{"targets": 1, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.ME}}{"targets": 2, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.MCC}}{"targets": 3, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Night}}{"targets": 4, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.IFR}}{"targets": 5, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.PIC}}{"targets": 6, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.CoPilot}}{"targets": 7, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Dual}}{"targets": 8, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Instructor}}{"targets": 9, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Sim}}{"targets": 10, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Landings}}{"targets": 11, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Distance}}{"targets": 12, "visible": false, "searchable": false},{{end}}
        ],
        "paging": false,
        "searching": false
    });

    // init Totals By Class table
    var tableTotalsByClass = $('#totals_by_class').DataTable({
        "orderFixed": [ 0, 'asc' ],
        "info": false,
        "ajax": '{{index .API "StatsTotalsByClass"}}',
        "columnDefs": [
            {"targets": 0, "className": "datatable-bold-column"},
            {{if $settings.HideStatsFields.SE}}{"targets": 1, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.ME}}{"targets": 2, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.MCC}}{"targets": 3, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Night}}{"targets": 4, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.IFR}}{"targets": 5, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.PIC}}{"targets": 6, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.CoPilot}}{"targets": 7, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Dual}}{"targets": 8, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Instructor}}{"targets": 9, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Sim}}{"targets": 10, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Landings}}{"targets": 11, "visible": false, "searchable": false},{{end}}
            {{if $settings.HideStatsFields.Distance}}{"targets": 12, "visible": false, "searchable": false},{{end}}
        ],
        "paging": false,
        "searching": false
    });

    // daterange logic
    $('input[name="daterange"]').daterangepicker({
        opens: 'left',
        autoUpdateInput: false,
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'This Year': [moment().startOf('year'), moment().endOf('year')],
            'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')]
        },
        alwaysShowCalendars: true,
        linkedCalendars: false,
        locale: {
            cancelLabel: 'Clear'
        }
    }, function(start, end, label) {
        startDate = start;
        endDate = end;
        // refresh tables
        tableTotals.ajax.url('{{index .API "StatsTotals"}}'+`?start_date=${encodeURIComponent(start.format("YYYYMMDD"))}&end_date=${encodeURIComponent(end.format("YYYYMMDD"))}`).load();
        tableTotalsByType.ajax.url('{{index .API "StatsTotalsByType"}}'+`?start_date=${encodeURIComponent(start.format("YYYYMMDD"))}&end_date=${encodeURIComponent(end.format("YYYYMMDD"))}`).load();
        tableTotalsByClass.ajax.url('{{index .API "StatsTotalsByClass"}}'+`?start_date=${encodeURIComponent(start.format("YYYYMMDD"))}&end_date=${encodeURIComponent(end.format("YYYYMMDD"))}`).load();
    });

    $('input[name="daterange"]').on('apply.daterangepicker', function(ev, picker) {
        $(this).val(picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY'));
    });

    $('input[name="daterange"]').on('cancel.daterangepicker', function(ev, picker) {
        $(this).val('Date filters...');
        startDate = null;
        endDate = null;
        // refresh tables
        tableTotals.ajax.url('{{index .API "StatsTotals"}}').load();
        tableTotalsByType.ajax.url('{{index .API "StatsTotalsByType"}}').load();
        tableTotalsByClass.ajax.url('{{index .API "StatsTotalsByClass"}}').load();
    });
});
</script>
{{end}}