{{define "stats-js"}}
{{$api := .API}}
<script type="text/javascript" src="/static/js/chart.min.js"></script>
<script>
const ctx = document.getElementById('myChart').getContext('2d');
const chart = new Chart(ctx, {
    type: 'bar',
    data: {},
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        },
        plugins:{
            legend: {
                display: false
            }
        }
    }
});

function convert(time) {
    if (time === "") {
        return 0;
    }

    if (!time.includes(":")) {
        return time.replace(" ",""); // already converted
    }

    var hoursMinutes = time.split(/[.:]/);
    var hours = parseInt(hoursMinutes[0], 10);
    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;

    return hours + Math.round(minutes / 60 * 100) / 100;
}

function StatsClick(table_name, cl) {
    var tb = document.getElementById(table_name);
    var rows = tb.rows.length - 1;

    if (table_name === "totals") {
        rows = rows - 2 // correction for this table
        chart.data.labels = ['Total', 'SE', 'ME', 'MCC', 'Night', 'IFR', 'PIC', 'CoPilot', 'Dual', 'Instr', 'Sim'];

    } else if ((table_name == "totals_by_year") || (table_name == "totals_by_type") || (table_name == "totals_by_class")) {
        var labels = [];
        for (var i = 1; i <= rows; i++) {
            labels.push(tb.rows[i].cells[0].innerText);
        }
        chart.data.labels = labels;

    }

    var values = [];
    for (var i = 1; i <= rows; i++) {
        values.push(convert(tb.rows[i].cells[cl].innerText));
    }

    chart.data.datasets = [
        {
            data: values,
            backgroundColor: 'rgba(36, 112, 220, 0.7)',
            borderColor: 'rgba(36, 112, 220, 0.7)',
            borderWidth: 1
        }
    ]
    chart.update();
}

function ShowRangeField(flag) {
    if (flag) {
        document.getElementById("range_field").classList.remove("d-none")
    } else {
        document.getElementById("range_field").classList.add("d-none")
    }
}

var startDate = null;
var endDate = null;

$(document).ready( function () {
    // init Totals table
    var tableTotals = $('#totals').DataTable({
        "ordering": false,
        "info": false,
        "ajax": '{{index .API "StatsTotals"}}',
        "columnDefs": [
            {"targets": 0, "visible": false, "searchable": false},
            {"targets": 1, "className": "datatable-bold-column"},
            {"targets": [2,3,4,5,6], "width": "15%"},
        ],
        "paging": false,
        "searching": false,
        'initComplete': function () {
            // Show Totals for chart
            StatsClick('totals', 5);
        }
    });

    // init Totals By Type table
    var tableTotalsByType = $('#totals_by_type').DataTable({
        "orderFixed": [ 0, 'asc' ],
        "info": false,
        "ajax": '{{index .API "StatsTotalsByType"}}',
        "columnDefs": [
            {"targets": 0, "className": "datatable-bold-column"},
        ],
        "paging": false,
        "searching": false
    });

    // init Totals By Class table
    var tableTotalsByClass = $('#totals_by_class').DataTable({
        "orderFixed": [ 0, 'asc' ],
        "info": false,
        "ajax": '{{index .API "StatsTotalsByClass"}}',
        "columnDefs": [
            {"targets": 0, "className": "datatable-bold-column"},
        ],
        "paging": false,
        "searching": false
    });

    // daterange logic
    $('input[name="daterange"]').daterangepicker({
        opens: 'left',
        autoUpdateInput: false,
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'This Year': [moment().startOf('year'), moment().endOf('year')],
            'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')]
        },
        alwaysShowCalendars: true,
        linkedCalendars: false,
        locale: {
            cancelLabel: 'Clear'
        }
    }, function(start, end, label) {
        startDate = start;
        endDate = end;
        // refresh tables
        tableTotals.ajax.url('{{index .API "StatsTotals"}}'+`?start_date=${encodeURIComponent(start.format("YYYYMMDD"))}&end_date=${encodeURIComponent(end.format("YYYYMMDD"))}`).load();
        tableTotalsByType.ajax.url('{{index .API "StatsTotalsByType"}}'+`?start_date=${encodeURIComponent(start.format("YYYYMMDD"))}&end_date=${encodeURIComponent(end.format("YYYYMMDD"))}`).load();
        tableTotalsByClass.ajax.url('{{index .API "StatsTotalsByClass"}}'+`?start_date=${encodeURIComponent(start.format("YYYYMMDD"))}&end_date=${encodeURIComponent(end.format("YYYYMMDD"))}`).load();
    });

    $('input[name="daterange"]').on('apply.daterangepicker', function(ev, picker) {
        $(this).val(picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY'));
    });

    $('input[name="daterange"]').on('cancel.daterangepicker', function(ev, picker) {
        $(this).val('Date filters...');
        startDate = null;
        endDate = null;
        // refresh tables
        tableTotals.ajax.url('{{index .API "StatsTotals"}}').load();
        tableTotalsByType.ajax.url('{{index .API "StatsTotalsByType"}}').load();
        tableTotalsByClass.ajax.url('{{index .API "StatsTotalsByClass"}}').load();
    });
});

var triggerTabList = [].slice.call(document.querySelectorAll('#myTab a'))
triggerTabList.forEach(function (triggerEl) {
    var tabTrigger = new bootstrap.Tab(triggerEl)

    triggerEl.addEventListener('click', function (event) {
        event.preventDefault()
        tabTrigger.show()
    })
})
</script>
{{end}}