{{ template "base" .}}

{{ define "title" }}
    {{$fr := index .Data "flightRecord"}}

Flight Record {{if $fr.UUID}}{{$fr.Departure.Place}} - {{$fr.Arrival.Place}}{{end}}
{{ end }}

{{ define "content" }}
    {{$fr := index .Data "flightRecord"}}
    {{$aircraft_regs := index .Data "aircraftRegs"}}
    {{$aircraft_models := index .Data "aircraftModels"}}

    <form action="/logbook/{{$fr.UUID}}" method="post" name="flight_record" id="flight_record"
        class="d-block" autocomplete="off" novalidate="">

        <div class="row">
            <div class="col-md-6">

                <div class="mb-2 row">
                    <div class="col-md-4">
                        <label for="date" class="form-label">Date</label>
                        <input type="text" class="form-control" id="date" name="date" value="{{$fr.Date}}"
                            required="true" autocomplete="off" placeholder="DD/MM/YYYY">
                    </div>
                </div>

                <div class="row">
                    <div class="card-header">Places & Landings</div>
                </div>

                <div class="mb-2 row">
                    <div class="col-md-2">
                        <label for="departure_place" class="form-label text-nowrap">Departure</label>
                        <input type="text" class="form-control text-transform: uppercase" id="departure_place" name="departure_place" value="{{$fr.Departure.Place}}"
                            required="" autocomplete="departure_place" onkeyup="this.value = this.value.toUpperCase();"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Departure Place">
                    </div>

                    <div class="col-md-2">
                        <label for="departure_time" class="form-label text-nowrap">Time</label>
                        <input type="text" class="form-control" id="departure_time" name="departure_time" value="{{$fr.Departure.Time}}"
                            required="" autocomplete="off" placeholder="HHMM" onchange="CalculateTimes()"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Departure Time">
                    </div>

                    <div class="col-md-2">
                        <label for="arrival_place" class="form-label text-nowrap">Arrival</label>
                        <input type="text" class="form-control" id="arrival_place" name="arrival_place" value="{{$fr.Arrival.Place}}"
                            required="" autocomplete="arrival_place" onkeyup="this.value = this.value.toUpperCase();"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Arrival Place">
                    </div>

                    <div class="col-md-2">
                        <label for="arrival_time" class="form-label text-nowrap">Time</label>
                        <input type="text" class="form-control" id="arrival_time" name="arrival_time" value="{{$fr.Arrival.Time}}"
                            required="" autocomplete="off" placeholder="HHMM" onchange="CalculateTimes()"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Arrival Time">
                    </div>

                    <div class="col-md-2">
                        <label for="landings_day" class="form-label text-nowrap">Day</label>
                        <input type="text" class="form-control" id="landings_day" name="landings_day" value="{{formatLandings $fr.Landings.Day}}"
                            required="" autocomplete="off"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Day Landings">
                    </div>

                    <div class="col-md-2">
                        <label for="landings_night" class="form-label text-nowrap">Night</label>
                        <input type="text" class="form-control" id="landings_night" name="landings_night" value="{{formatLandings $fr.Landings.Night}}"
                            required="" autocomplete="off"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Night Landings">
                    </div>
                </div>

                <div class="row">
                    <div class="card-header">Aircraft & Pilot</div>
                </div>

                <div class="mb-2 row">
                    <div class="col-md-3">
                        <label for="aircraft_model" class="form-label">Model</label>
                        <input class="form-control" id="aircraft_model" name="aircraft_model" value="{{$fr.Aircraft.Model}}"
                            required="" autocomplete="aircraft_model" list="aircraft_model_options">
                        <datalist id="aircraft_model_options">
                        {{ range $aircraft_models}}
                        <option value="{{.}}">
                        {{ end}}
                        </datalist>
                    </div>

                    <div class="col-md-3">
                        <label for="aircraft_reg" class="form-label">Registration</label>
                        <input class="form-control" id="aircraft_reg" name="aircraft_reg" value="{{$fr.Aircraft.Reg}}"
                            required="" autocomplete="aircraft_reg" list="aircraft_reg_options">
                        <datalist id="aircraft_reg_options">
                        {{ range $aircraft_regs}}
                        <option value="{{.}}">
                        {{ end}}
                        </datalist>
                    </div>

                    <div class="col-md-6">
                        <label for="pic_name" class="form-label">PIC Name</label>
                        <input type="text" class="form-control" id="pic_name" name="pic_name" value="{{$fr.PIC}}"
                            required="" autocomplete="pic_name">
                    </div>
                </div>

                <div class="row">
                    <div class="card-header">Flight Times</div>
                </div>

                <div class="mb-2 row">
                    <div class="col-md-3">
                        <label for="total_time" class="form-label text-nowrap">Total</label>
                        <input type="text" class="form-control" id="total_time" name="total_time" value="{{$fr.Time.Total}}"
                            required="" autocomplete="off" placeholder="HH:MM">
                    </div>

                    <div class="col-md-3">
                        <label for="se_time" class="form-label text-nowrap">Single Engine</label>
                        <input type="text" class="form-control" id="se_time" name="se_time" value="{{$fr.Time.SE}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-3">
                        <label for="me_time" class="form-label text-nowrap">Multi Engine</label>
                        <input type="text" class="form-control" id="me_time" name="me_time" value="{{$fr.Time.ME}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-3">
                        <label for="mcc_time" class="form-label text-nowrap">MCC</label>
                        <input type="text" class="form-control" id="mcc_time" name="mcc_time" value="{{$fr.Time.MCC}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>
                </div>
                <div class="mb-2 row">
                    <div class="col-md-2">
                        <label for="night_time" class="form-label text-nowrap">Night</label>
                        <input type="text" class="form-control" id="night_time" name="night_time" value="{{$fr.Time.Night}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-2">
                        <label for="ifr_time" class="form-label text-nowrap">IFR</label>
                        <input type="text" class="form-control" id="ifr_time" name="ifr_time" value="{{$fr.Time.IFR}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-2">
                        <label for="pic_time" class="form-label text-nowrap">PIC</label>
                        <input type="text" class="form-control" id="pic_time" name="pic_time" value="{{$fr.Time.PIC}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-2">
                        <label for="sic_time" class="form-label text-nowrap">Co Pilot</label>
                        <input type="text" class="form-control" id="sic_time" name="sic_time" value="{{$fr.Time.CoPilot}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-2">
                        <label for="dual_time" class="form-label text-nowrap">Dual</label>
                        <input type="text" class="form-control" id="dual_time" name="dual_time" value="{{$fr.Time.Dual}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>

                    <div class="col-md-2">
                        <label for="instr_time" class="form-label text-nowrap">Instructor</label>
                        <input type="text" class="form-control" id="instr_time" name="instr_time" value="{{$fr.Time.Instructor}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>
                </div>

                <div class="row">
                    <div class="card-header">Simulator & Remarks</div>
                </div>

                <div class="mb-2 row">
                    <div class="col-md-3">
                        <label for="sim_type" class="form-label">Simulator Type</label>
                        <input type="text" class="form-control" id="sim_type" name="pic_name" value="{{$fr.SIM.Type}}"
                            required="" autocomplete="sim_type">
                    </div>
                    <div class="col-md-3">
                        <label for="sim_time" class="form-label text-nowrap">Time</label>
                        <input type="text" class="form-control" id="sim_time" name="sim_time" value="{{$fr.SIM.Time}}"
                            required="" autocomplete="off" placeholder="HH:MM" ondblclick="this.value=document.getElementById('total_time').value;"
                            data-bs-toggle="tooltip" data-bs-placement="bottom" title="Double Click will copy value from Total Time">
                    </div>
                    <div class="col-md-6">
                        <label for="remarks" class="form-label">Remarks</label>
                        <input type="text" class="form-control" id="remarks" name="remarks" value="{{$fr.Remarks}}"
                            required="" autocomplete="off">
                    </div>

                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-2 row">
                    <div class="col-md-12">
                        Here will be a map
                    </div>
                </div>
                <div class="mb-2 row">
                    <div class="col-md-12">
                        Here will be some stats
                    </div>
                </div>
            </div>
	    </div>
        <div class="mb-2 row">
            <input type="hidden" name="uuid" id="uuid" value="{{if $fr.UUID}}{{$fr.UUID}}{{end}}">
            <div class="col">
                <div class="alert-danger text-center d-none" id="info" role="alert"></div>
            </div>
        </div>
        <hr>

        <button class="btn btn-primary" type="button" onclick="validate()" id="save">Save</button>
        <div class="float-end">
            {{if $fr.UUID}}<a id="delete" class="btn btn-danger float-right" data-bs-toggle="modal" data-bs-target="#delete-record">Delete</a>{{end}}
        </div>

    </form>

    <!-- Modal -->
    <div class="modal fade" id="delete-record" tabindex="-1" aria-labelledby="delete-record" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Delete Flight Record?</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cancel"></button>
        </div>
        <div class="modal-body">
            Are you sure you want to delete the Flight Record?
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" onclick="DeleteFlightRecord()">Delete</button>
        </div>
        </div>
    </div>
    </div>

{{ end }}

{{ define "js" }}
<script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    let infoMsg = document.getElementById("info");

    function validate() {

        let isValid = true;
        let errorMessage = "";

        // validate date field
        let date = document.getElementById("date");
        if (!date.value) {
            date.classList.add("is-invalid");
            isValid = false
            errorMessage = errorMessage + "Date cannot be empty\r\n";
        } else {
            date.classList.add("is-valid");
        }

        // valiudate departure and arrival time if they are not empty
        if (!validateDepArrTime(document.getElementById("departure_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Departure Time should be in HHMM format or empty\r\n";
        }
        if (!validateDepArrTime(document.getElementById("arrival_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Arrival Time should be in HHMM format or empty\r\n";
        }

        // validate time fields
        if (!validateTime(document.getElementById("total_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Total Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("se_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Single Engine Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("me_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Multi Engine Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("mcc_time"))) {
            isValid = false;
            errorMessage = errorMessage + "MCC Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("night_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Night Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("ifr_time"))) {
            isValid = false;
            errorMessage = errorMessage + "IFR Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("pic_time"))) {
            isValid = false;
            errorMessage = errorMessage + "PIC Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("sic_time"))) {
            isValid = false;
            errorMessage = errorMessage + "CoPilot Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("dual_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Dual Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("instr_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Instructor Time should be in HH:MM format or empty\r\n";
        }
        if (!validateTime(document.getElementById("sim_time"))) {
            isValid = false;
            errorMessage = errorMessage + "Simulator Time should be in HH:MM format or empty\r\n";
        }

        if (!isValid) {
            showErrorMessage(errorMessage);
            return;
        }

        showInfoMessage("OK!");

        SaveFlightRecord();
    }

    function showErrorMessage(msg) {
        infoMsg.classList.add("alert-danger");
        infoMsg.classList.remove("alert-success");
        infoMsg.classList.remove("d-none");
        infoMsg.innerText = msg;
    }

    function showInfoMessage(msg) {
        infoMsg.classList.remove("alert-danger");
        infoMsg.classList.add("alert-success");
        infoMsg.classList.remove("d-none");
        infoMsg.innerText = msg;
    }

    function SaveFlightRecord() {
        let payload = {
            uuid: document.getElementById("uuid").value,
            date: document.getElementById("date").value,
            departure: {
                place: document.getElementById("departure_place").value,
                time: document.getElementById("departure_time").value
            },
            arrival: {
                place: document.getElementById("arrival_place").value,
                time: document.getElementById("arrival_time").value
            },
            aircraft: {
                model: document.getElementById("aircraft_model").value,
                reg_name: document.getElementById("aircraft_reg").value
            },
            time: {
                se_time: document.getElementById("se_time").value,
                me_time: document.getElementById("me_time").value,
                mcc_time: document.getElementById("mcc_time").value,
                total_time: document.getElementById("total_time").value,
                night_time: document.getElementById("night_time").value,
                ifr_time: document.getElementById("ifr_time").value,
                pic_time: document.getElementById("pic_time").value,
                co_pilot_time: document.getElementById("sic_time").value,
                dual_time: document.getElementById("dual_time").value,
                instructor_time: document.getElementById("instr_time").value
            },
            landings: {
                day: formatLandings(document.getElementById("landings_day").value),
                night: formatLandings(document.getElementById("landings_night").value)
            },
            sim: {
                type: document.getElementById("sim_type").value,
                time: document.getElementById("sim_time").value
            },
            pic_name: document.getElementById("pic_name").value,
            remarks: document.getElementById("remarks").value
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{.API}}/logbook/save", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    showErrorMessage(data.message);
                }
            })
    }

    function DeleteFlightRecord() {
        let payload = {
            uuid: document.getElementById("uuid").value
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{.API}}/logbook/delete", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    showErrorMessage(data.message);
                }
            })
    }

    function formatLandings(value) {
        if (value === "") {
            return 0;
        } else {
            return parseInt(value);
        }
    }
    function validateDepArrTime(field) {
        if (field.value !== "") {
            if (field.value.length !== 4) {
                field.classList.add("is-invalid")
                return false
            } else {
                field.classList.add("is-valid")
            }
        }

        return true
    }

    function validateTime(field) {
        if (field.value !== "") {
            if (!/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(field.value)) {
                field.classList.add("is-invalid")
                return false
            } else {
                field.classList.add("is-valid")
            }
        }

        return true
    }

    function CalculateTimes() {
        let departure_time = document.getElementById("departure_time").value;
        let arrival_time = document.getElementById("arrival_time").value;

        if ((departure_time.length == 4) && (arrival_time.length == 4) && (!isNaN(departure_time)) && (!isNaN(arrival_time))) {
            start = [departure_time.substring(0, 2), departure_time.substring(2)];
            end = [arrival_time.substring(0, 2), arrival_time.substring(2)];

            document.getElementById("total_time").value = CalculateTotalTime(start, end);

            CalculateNightTime();
        }
    }

    function CalculateTotalTime(start, end) {
        var startDate = new Date(0, 0, 0, start[0], start[1], 0);
        var endDate = new Date(0, 0, 0, end[0], end[1], 0);
        var diff = endDate.getTime() - startDate.getTime();
        var hours = Math.floor(diff / 1000 / 60 / 60);
        diff -= hours * 1000 * 60 * 60;
        var minutes = Math.floor(diff / 1000 / 60);


        if (hours < 0) {
            hours = hours + 24;
        }

        totalTime = hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
        return totalTime;
    }

    function CalculateNightTime() {
        let payload = {
            date: document.getElementById("date").value,
            departure: {
                place: document.getElementById("departure_place").value,
                time: document.getElementById("departure_time").value
            },
            arrival: {
                place: document.getElementById("arrival_place").value,
                time: document.getElementById("arrival_time").value
            }
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        }

        fetch("{{.API}}/logbook/night", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    night_time = parseInt(data.message)
                    if (night_time > 0) {
                        var hours = Math.floor(night_time / 60);
                        var minutes = night_time - (hours * 60);

                        time = hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
                        document.getElementById("night_time").value = time;
                    } else {
                        document.getElementById("night_time").value = "";
                    }
                }
            })
    }

</script>
{{ end }}