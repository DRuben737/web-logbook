{{define "flight-record-map"}}
<script src="/static/js/ol.js"></script>
<script>

// WebLogbook wlbFlightMap Namespace
wlbFlightMap = function () {
    // popup overlay
    const container = document.getElementById('popup');
    const content = document.getElementById('popup-content');
    const closer = document.getElementById('popup-closer');

    const overlay = new ol.Overlay({
        element: container,
        autoPan: {
            animation: {
            duration: 250,
            },
        },
    });

    function closerOnClick() {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    }

    closer.onclick = closerOnClick;

    function midpoint(lat1, lon1, lat2, lon2) {

        lat1= deg2rad(lat1);
        lon1= deg2rad(lon1);
        lat2= deg2rad(lat2);
        lon2= deg2rad(lon2);

        dlng = lon2 - lon1;
        Bx = Math.cos(lat2) * Math.cos(dlng);
        By = Math.cos(lat2) * Math.sin(dlng);
        lat3 = Math.atan2( Math.sin(lat1)+Math.sin(lat2),
        Math.sqrt((Math.cos(lat1)+Bx)*(Math.cos(lat1)+Bx) + By*By ));
        lng3 = lon1 + Math.atan2(By, (Math.cos(lat1) + Bx));

        return (lat3*180)/Math.PI +'|'+ (lng3*180)/Math.PI;
    }

    function deg2rad (degrees) {
        return degrees * Math.PI / 180;
    };

    function distance(lat1, lon1, lat2, lon2)
    {
        var R = 6371; // km
        var dLat = deg2rad(lat2-lat1);
        var dLon = deg2rad(lon2-lon1);
        var lat1 = deg2rad(lat1);
        var lat2 = deg2rad(lat2);

        var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        var d = R * c;

        return d
    }

    async function loadMap(departure_place, arrival_place) {
        document.getElementById("map").innerText = "";

        // load deprature & arrival airports
        var dep = await wlbCommon.getJSON("{{index .API "Airport"}}"+departure_place);
        var arr = await wlbCommon.getJSON("{{index .API "Airport"}}"+arrival_place);

        // calculate center of the map
        var center = midpoint(dep["lat"], dep["lon"], arr["lat"], arr["lon"]);
        var dist = distance(dep["lat"], dep["lon"], arr["lat"], arr["lon"]);

        /* generate a map */
        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            overlays: [overlay],
            view: new ol.View({
                center: ol.proj.fromLonLat([center.split("|")[1], center.split("|")[0]]),
                zoom: 5
            }),
            controls: ol.control.defaults.defaults().extend([
                new ol.control.FullScreen()
            ])
        });

        /* drawing route... */
        var points = [ [dep["lon"], dep["lat"]], [arr["lon"], arr["lat"]] ];

        for (var i = 0; i < points.length; i++) {
            points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857');
        }

        var featureLine = new ol.Feature({
            geometry: new ol.geom.LineString(points)
        });

        var vectorLine = new ol.source.Vector({});
        vectorLine.addFeature(featureLine);

        var vectorLineLayer = new ol.layer.Vector({
            source: vectorLine,
            style: new ol.style.Style({
                fill: new ol.style.Fill({ color: '#888888', weight: 0.4 }),
                stroke: new ol.style.Stroke({ color: '#888888', width: 1 })
            })
        });

        /* drawing markers */
        var points = [];
        points.push([dep["lon"],dep["lat"]])
        points.push([arr["lon"],arr["lat"]])

        var markers = [dep, arr];

        var vectorMarker = new ol.source.Vector({});

        for (var x = 0; x < points.length; x++) {
            var iconStyle = [
                    new ol.style.Style({
                        image: new ol.style.Icon(/** @type {module:ol/style/Icon~Options} */ ({
                            src: "/static/favicon.ico"
                        }))
                    }),
                    new ol.style.Style({
                        text: new ol.style.Text({
                            text: markers[x]["name"],
                            offsetY: -12,
                            scale: 1.3,
                            fill: new ol.style.Fill({
                                color: '#333',
                            })
                        })
                    })
                ]

            var featureMarker = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat(points[x])),
                desc: "/static/favicon.ico",
                name: `${markers[x]["icao"]}/${markers[x]["iata"]}`,
                civil_name: markers[x]["name"],
                country: markers[x]["country"],
                city: markers[x]["city"],
                elevation: markers[x]["elevation"],
                coordinates: `${markers[x]["lat"]}, ${markers[x]["lon"]}`,
            });

            featureMarker.setStyle(iconStyle);
            vectorMarker.addFeature(featureMarker);
        }

        var vectorMarkerLayer = new ol.layer.Vector({
            source: vectorMarker,
        });

        map.addLayer(vectorLineLayer);
        map.addLayer(vectorMarkerLayer);

        map.renderSync();

        var extent = vectorLineLayer.getSource().getExtent();
        map.getView().fit(extent, {size:map.getSize(), maxZoom:16, padding: [20,20,20,20]});

        document.getElementById("some_stats").innerText = "Distance: " + Math.floor(dist) + " km / " + Math.floor(dist/1.852) + " nm";

        map.on('click', function (evt) {
            const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
                return feature;
            });

            // cliked somewhere on the map
            if (!feature) {
                closerOnClick();
                return;
            }

            // clicked but not on the marker
            if (feature.get("name") === undefined) {
                closerOnClick();
                return;
            }

            // show airport/marker info
            const coordinates = feature.getGeometry().getCoordinates();
            content.innerHTML =
                '<strong>Airport:</strong> ' + feature.get('name') + '<br>' +
                '<strong>Name:</strong> ' + feature.get('civil_name') + '<br>' +
                '<strong>Country:</strong> ' + feature.get('country') + '<br>' +
                '<strong>Elevation:</strong> ' + feature.get('elevation') + '<br>' +
                '<strong>Lat/Lon:</strong> ' + feature.get('coordinates') + '<br>';
            overlay.setPosition(coordinates);
        });

        map.on('pointermove', function (e) {
            const pixel = map.getEventPixel(e.originalEvent);

            var is_marker = false;
            features = map.getFeaturesAtPixel(pixel);
            for (var x = 0; x < features.length; x++) {
                if (features[x].get("name") !== undefined) {
                    is_marker = true;
                }
            }

            if(is_marker) {
                const hit = map.hasFeatureAtPixel(pixel);
                document.getElementById('map').style.cursor = hit ? 'pointer' : '';
            } else {
                document.getElementById('map').style.cursor = '';
            }
        });
    }

    return {
        loadMap:loadMap
    }
}();
</script>
{{end}}