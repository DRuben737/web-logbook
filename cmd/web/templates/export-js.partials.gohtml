{{define "export-js"}}
{{$api := .API}}
<script>

// WebLogbook Export Namespace
wlbExport = function () {

    const formatMap = {
        "A4": "custom_title_a4",
        "A5": "custom_title_a5"
    };

    async function getCustomTitle(format) {
        const attachments_url = "{{index .API "LogbookUUIDAttachments"}}";

        if (!formatMap[format]) {return;}

        const url = attachments_url.replace("{uuid}", formatMap[format]);
        const data = await wlbCommon.getJSON(url);
        if (data.length > 0) {
            return data[0].uuid;
        } else {
            return ""
        }
    }

    async function previewCustomTitle(format) {
        if (!formatMap[format]) {return;}

        const uuid = await getCustomTitle(format);
        if (uuid !== "") {
            window.open("{{$api.LogbookAttachmentsDownload}}"+uuid, "_blank");
        }
    }

    async function deleteCustomTitle(format) {
        // drop current saved file from attachments
        const attachments_url = "{{index .API "LogbookUUIDAttachments"}}".replace("{uuid}", formatMap[format]);
        const data = await wlbCommon.getJSON(attachments_url);

        if (data.length > 0) {
            for (let i = 0; i < data.length; i++) {
                const payload = {uuid: data[i].uuid}
                const requestOptions = {method: "post", body: JSON.stringify(payload)};
                await fetch("{{index .API "LogbookAttachmentsDelete"}}", requestOptions)
            }
        }
    }

    async function saveCustomTitle(format) {
        const custom_title_element = document.getElementById(formatMap[format]);
        const file = custom_title_element.files[0];

        if (file) {
            await deleteCustomTitle(format);

            // upload new file as attachment
            let payload = new FormData();
            payload.append("document", file);
            payload.append("record_id", formatMap[format]);

            const requestOptions = {method: "post", body: payload};
            await fetch("{{index .API "LogbookAttachmentsUpload"}}", requestOptions)

            // update uuid in settings
            const attachments_url = "{{index .API "LogbookUUIDAttachments"}}".replace("{uuid}", formatMap[format]);
            const data = await wlbCommon.getJSON(attachments_url);
            if (data.length > 0) {
                return data[0].uuid;
            } else {
                return ""
            }
        } else {
            const uuid = await getCustomTitle(format);
            return uuid;
        }
    }

    async function saveExportA4() {
        let time_fields_auto_format = 0;
        if (document.getElementById("time_field_format_radio2_a4").checked) {
            time_fields_auto_format = 1;
        } else if (document.getElementById("time_field_format_radio3_a4").checked) {
            time_fields_auto_format = 2;
        }

        let custom_title_a4 = await saveCustomTitle("A4");

        let payload = {
            export_a4: {
                logbook_rows: parseInt(document.getElementById("logbook_rows_a4").value),
                fill: parseInt(document.getElementById("fill_a4").value),
                left_margin: parseFloat(document.getElementById("left_margin_a4").value),
                top_margin: parseFloat(document.getElementById("top_margin_a4").value),
                body_row_height: parseFloat(document.getElementById("row_height_a4").value),
                footer_row_height: parseFloat(document.getElementById("footer_height_a4").value),
                page_breaks: document.getElementById("page_breaks_a4").value,
                replace_sp_time: document.getElementById("replace_sp_time_a4").checked,
                include_signature: document.getElementById("include_signature_a4").checked,
                is_extended: document.getElementById("is_extended_a4").checked,
                time_fields_auto_format: time_fields_auto_format,
                custom_title: custom_title_a4,
                columns: {
                    col1: parseFloat(document.getElementById("col1_a4").value),
                    col2: parseFloat(document.getElementById("col2_a4").value),
                    col3: parseFloat(document.getElementById("col3_a4").value),
                    col4: parseFloat(document.getElementById("col4_a4").value),
                    col5: parseFloat(document.getElementById("col5_a4").value),
                    col6: parseFloat(document.getElementById("col6_a4").value),
                    col7: parseFloat(document.getElementById("col7_a4").value),
                    col8: parseFloat(document.getElementById("col8_a4").value),
                    col9: parseFloat(document.getElementById("col9_a4").value),
                    col10: parseFloat(document.getElementById("col10_a4").value),
                    col11: parseFloat(document.getElementById("col11_a4").value),
                    col12: parseFloat(document.getElementById("col12_a4").value),
                    col13: parseFloat(document.getElementById("col13_a4").value),
                    col14: parseFloat(document.getElementById("col14_a4").value),
                    col15: parseFloat(document.getElementById("col15_a4").value),
                    col16: parseFloat(document.getElementById("col16_a4").value),
                    col17: parseFloat(document.getElementById("col17_a4").value),
                    col18: parseFloat(document.getElementById("col18_a4").value),
                    col19: parseFloat(document.getElementById("col19_a4").value),
                    col20: parseFloat(document.getElementById("col20_a4").value),
                    col21: parseFloat(document.getElementById("col21_a4").value),
                    col22: parseFloat(document.getElementById("col22_a4").value),
                    col23: parseFloat(document.getElementById("col23_a4").value)
                },
                headers: {
                    date: document.getElementById("header_date_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    departure: document.getElementById("header_departure_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    arrival: document.getElementById("header_arrival_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    aircraft: document.getElementById("header_aircraft_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    spt: document.getElementById("header_spt_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    mcc: document.getElementById("header_mcc_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    total: document.getElementById("header_total_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    pic_name: document.getElementById("header_pic_name_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    landings: document.getElementById("header_landings_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    oct: document.getElementById("header_oct_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    pft: document.getElementById("header_pft_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    fstd: document.getElementById("header_fstd_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    remarks: document.getElementById("header_remarks_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    dep_place: document.getElementById("header_dep_place_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    dep_time: document.getElementById("header_dep_time_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    arr_place: document.getElementById("header_arr_place_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    arr_time: document.getElementById("header_arr_time_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    model: document.getElementById("header_model_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    reg: document.getElementById("header_reg_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    se: document.getElementById("header_se_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    me: document.getElementById("header_me_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    land_day: document.getElementById("header_land_day_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    land_night: document.getElementById("header_land_night_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    night: document.getElementById("header_night_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    ifr: document.getElementById("header_ifr_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    pic: document.getElementById("header_pic_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    cop: document.getElementById("header_cop_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    dual: document.getElementById("header_dual_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    instr: document.getElementById("header_instr_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    sim_type: document.getElementById("header_sim_type_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    sim_time: document.getElementById("header_sim_time_a4").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                }
            }
        };

        const requestOptions = {
            method: "post",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
        };

        const response = await fetch("{{$api.Export}}/{{$api.ExportFormatA4}}", requestOptions);
        const data = await response.json();
        if (data.ok) {
            wlbCommon.showInfoMessage(data.message);
            if (typeof data.redirect_url !== "undefined") {
                location.href = data.redirect_url;
            }
        } else {
            wlbCommon.showErrorMessage(data.message);
        }
    }

    function saveExportA5() {
        let time_fields_auto_format = 0;
        if (document.getElementById("time_field_format_radio2_a5").checked) {
            time_fields_auto_format = 1;
        } else if (document.getElementById("time_field_format_radio3_a5").checked) {
            time_fields_auto_format = 2;
        }

        let payload = {
            export_a5: {
                logbook_rows: parseInt(document.getElementById("logbook_rows_a5").value),
                fill: parseInt(document.getElementById("fill_a5").value),
                left_margin_a: parseFloat(document.getElementById("left_margin_a_a5").value),
                left_margin_b: parseFloat(document.getElementById("left_margin_b_a5").value),
                top_margin: parseFloat(document.getElementById("top_margin_a5").value),
                body_row_height: parseFloat(document.getElementById("row_height_a5").value),
                footer_row_height: parseFloat(document.getElementById("footer_height_a5").value),
                page_breaks: document.getElementById("page_breaks_a5").value,
                replace_sp_time: document.getElementById("replace_sp_time_a5").checked,
                include_signature: document.getElementById("include_signature_a5").checked,
                is_extended: document.getElementById("is_extended_a5").checked,
                time_fields_auto_format: time_fields_auto_format,
                columns: {
                    col1: parseFloat(document.getElementById("col1_a5").value),
                    col2: parseFloat(document.getElementById("col2_a5").value),
                    col3: parseFloat(document.getElementById("col3_a5").value),
                    col4: parseFloat(document.getElementById("col4_a5").value),
                    col5: parseFloat(document.getElementById("col5_a5").value),
                    col6: parseFloat(document.getElementById("col6_a5").value),
                    col7: parseFloat(document.getElementById("col7_a5").value),
                    col8: parseFloat(document.getElementById("col8_a5").value),
                    col9: parseFloat(document.getElementById("col9_a5").value),
                    col10: parseFloat(document.getElementById("col10_a5").value),
                    col11: parseFloat(document.getElementById("col11_a5").value),
                    col12: parseFloat(document.getElementById("col12_a5").value),
                    col13: parseFloat(document.getElementById("col13_a5").value),
                    col14: parseFloat(document.getElementById("col14_a5").value),
                    col15: parseFloat(document.getElementById("col15_a5").value),
                    col16: parseFloat(document.getElementById("col16_a5").value),
                    col17: parseFloat(document.getElementById("col17_a5").value),
                    col18: parseFloat(document.getElementById("col18_a5").value),
                    col19: parseFloat(document.getElementById("col19_a5").value),
                    col20: parseFloat(document.getElementById("col20_a5").value),
                    col21: parseFloat(document.getElementById("col21_a5").value),
                    col22: parseFloat(document.getElementById("col22_a5").value),
                    col23: parseFloat(document.getElementById("col23_a5").value)
                },
                headers: {
                    date: document.getElementById("header_date_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    departure: document.getElementById("header_departure_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    arrival: document.getElementById("header_arrival_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    aircraft: document.getElementById("header_aircraft_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    spt: document.getElementById("header_spt_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    mcc: document.getElementById("header_mcc_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    total: document.getElementById("header_total_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    pic_name: document.getElementById("header_pic_name_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    landings: document.getElementById("header_landings_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    oct: document.getElementById("header_oct_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    pft: document.getElementById("header_pft_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    fstd: document.getElementById("header_fstd_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    remarks: document.getElementById("header_remarks_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    dep_place: document.getElementById("header_dep_place_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    dep_time: document.getElementById("header_dep_time_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    arr_place: document.getElementById("header_arr_place_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    arr_time: document.getElementById("header_arr_time_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    model: document.getElementById("header_model_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    reg: document.getElementById("header_reg_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    se: document.getElementById("header_se_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    me: document.getElementById("header_me_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    land_day: document.getElementById("header_land_day_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    land_night: document.getElementById("header_land_night_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    night: document.getElementById("header_night_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    ifr: document.getElementById("header_ifr_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    pic: document.getElementById("header_pic_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    cop: document.getElementById("header_cop_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    dual: document.getElementById("header_dual_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    instr: document.getElementById("header_instr_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    sim_type: document.getElementById("header_sim_type_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                    sim_time: document.getElementById("header_sim_time_a5").innerText.replace(/(\r\n|\n|\r)/gm, " "),
                }
            }
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{$api.Export}}/{{$api.ExportFormatA5}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    function saveExportXLS() {
        let payload = {
            export_xls: {
                convert_time: document.getElementById("convert_time_xls").checked
            }
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{$api.Export}}/{{$api.ExportFormatXLS}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    function saveExportCSV() {
        let payload = {
            export_csv: {
                crlf: document.getElementById("crlf_csv").checked,
                delimeter: document.getElementById("delimeter_csv").value
            }
        };

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{$api.Export}}/{{$api.ExportFormatCSV}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    function restoreDefaults(part) {
        let payload = part;

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        };

        fetch("{{$api.ExportRestoreDefaults}}", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.ok) {
                    wlbCommon.showInfoMessage(data.message);
                    if (typeof data.redirect_url !== 'undefined') {
                        location.href = data.redirect_url;
                    }
                } else {
                    wlbCommon.showErrorMessage(data.message);
                }
            });
    }

    function showTab(param) {
        if (param) {
            if (param === "a5headers" || param === "a5common" || param === "a5columns") {
                $("#nav-export-a5-tab").trigger("click");
            }
        }
    }

    return {
        saveExportA5:saveExportA5,
        saveExportA4:saveExportA4,
        saveExportCSV:saveExportCSV,
        saveExportXLS:saveExportXLS,
        restoreDefaults:restoreDefaults,
        showTab:showTab,
        previewCustomTitle:previewCustomTitle,
        deleteCustomTitle:deleteCustomTitle
    }
}();

$(document).ready( function () {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const param = urlParams.get('param');

    wlbExport.showTab(param);
});
</script>
{{end}}